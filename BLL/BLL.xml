<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BLL</name>
    </assembly>
    <members>
        <member name="T:BLL.Companies.AbstractCompany">
            <summary>
            Represents an abstract company in the system.
            </summary>
        </member>
        <member name="P:BLL.Companies.AbstractCompany.CompanyId">
            <summary>
            Company identifier.
            </summary>
        </member>
        <member name="P:BLL.Companies.AbstractCompany.CompanyName">
            <summary>
            Company name.
            </summary>
        </member>
        <member name="P:BLL.Companies.AbstractCompany.TotalStrategy">
            <summary>
            Strategy to apply to calculate the total of an order.
            </summary>
        </member>
        <member name="T:BLL.Companies.Company_1">
            <summary>
            Company 1 in the system.
            </summary>
        </member>
        <member name="T:BLL.Companies.Company_2">
            <summary>
            Company 2 in the system.
            </summary>
        </member>
        <member name="T:BLL.CompanyManager.CompanyManager">
            <summary>
            Factory class that manage the companies in the system.
            </summary>
        </member>
        <member name="M:BLL.CompanyManager.CompanyManager.GetCompany(System.String)">
            <summary>
            Returns a company in the system by id.
            </summary>
            <param name="companyId">Company identifier.</param>
            <returns>The company identified by companyId.</returns>
        </member>
        <member name="T:BLL.CompanyManager.ICompanyManager">
            <summary>
            Factory interface that manage the companies in the system.
            </summary>
        </member>
        <member name="M:BLL.CompanyManager.ICompanyManager.GetCompany(System.String)">
            <summary>
            Returns a company in the system by id.
            </summary>
            <param name="companyId">Company identifier.</param>
            <returns>The company identified by companyId.</returns>
        </member>
        <member name="T:BLL.EvalStrategies.Interfaces.ITotalStrategy">
            <summary>
            Interface to calculate the total of an order.
            </summary>
        </member>
        <member name="T:BLL.EvalStrategies.AdministrativeCostTotalStrategy">
            <summary>
            Concrete strategy to calculate the total of an order.
            </summary>
        </member>
        <member name="T:BLL.EvalStrategies.ManagementCostTotalStrategy">
            <summary>
            Concrete strategy to calculate the total of an order.
            </summary>
        </member>
        <member name="T:BLL.Repositories.Interfaces.IProductRepository">
            <summary>
            IRepository for entity type Product.
            </summary>
        </member>
        <member name="M:BLL.Repositories.Interfaces.IProductRepository.SubtractFromStock(DAL.Models.Product,System.Int32)">
            <summary>
            Subtracts the specified quantity from the stock.
            </summary>
            <param name="product">A product.</param>
            <param name="quantity">Quantity ordered.</param>
        </member>
        <member name="T:BLL.Repositories.Interfaces.IProductOrderRepository">
            <summary>
            IRepository for entity type ProductOrder.
            </summary>
        </member>
        <member name="T:BLL.Repositories.Interfaces.IOrderRepository">
            <summary>
            IRepository for entity type Order.
            </summary>
        </member>
        <member name="M:BLL.Repositories.Interfaces.IOrderRepository.ExistsOrderToday(System.String)">
            <summary>
            Checks whether exists an order done today for the specified company.
            </summary>
            <param name="companyId"></param>
            <returns>True if exists, false otherwise.</returns>
        </member>
        <member name="T:BLL.Repositories.Interfaces.IRepository`1">
            <summary>
            Contains base repository methods for an entity type.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
        </member>
        <member name="M:BLL.Repositories.Interfaces.IRepository`1.AddAsync(`0)">
            <summary>
            Adds a single entity of TEntity to the database.
            </summary>
            <param name="entity">Entity object.</param>
            <returns></returns>
        </member>
        <member name="M:BLL.Repositories.Interfaces.IRepository`1.GetAsync(System.Object[])">
            <summary>
            Returns a single entity of TEntity from the database.
            </summary>
            <param name="keyValues">Key values.</param>
            <returns>A single entity of type TEntity.</returns>
        </member>
        <member name="M:BLL.Repositories.Interfaces.IRepository`1.GetAllAsync">
            <summary>
            Returns all the entities of TEntity from the database.
            </summary>
            <returns>A list of entities of type TEntity.</returns>
        </member>
        <member name="M:BLL.Repositories.Interfaces.IRepository`1.GetPagedResultsAsync(System.Int32,System.Int32)">
            <summary>
            Returns a paged result of entities of TEntity from the database.
            </summary>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns>A list of entities of type TEntity.</returns>
        </member>
        <member name="T:BLL.Repositories.OrderRepository">
            <summary>
            Concrete repository for entity type Order.
            </summary>
        </member>
        <member name="T:BLL.Repositories.ProductOrderRepository">
            <summary>
            Concrete repository for entity type ProductOrder.
            </summary>
        </member>
        <member name="T:BLL.Repositories.ProductRepository">
            <summary>
            Concrete repository for entity type Product.
            </summary>
        </member>
        <member name="T:BLL.Repositories.Repository`2">
            <summary>
            Contains base repository methods for an entity type.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <typeparam name="TContext">Database context.</typeparam>
        </member>
        <member name="T:BLL.UnitOfWork.IUnitOfWork">
            <summary>
            Allows to access all the entities repositories.
            </summary>
        </member>
        <member name="P:BLL.UnitOfWork.IUnitOfWork.ProductRepository">
            <summary>
            Products repository.
            </summary>
        </member>
        <member name="P:BLL.UnitOfWork.IUnitOfWork.OrderRepository">
            <summary>
            Order repository.
            </summary>
        </member>
        <member name="P:BLL.UnitOfWork.IUnitOfWork.ProductOrderRepository">
            <summary>
            ProductOrders repository.
            </summary>
        </member>
        <member name="M:BLL.UnitOfWork.IUnitOfWork.SaveChangesAsync">
            <summary>
            Commits changes to behind databases.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BLL.UnitOfWork.UnitOfWork">
            <summary>
            Allows to access all the entities repositories.
            </summary>
        </member>
    </members>
</doc>
